Anita Yakobchuk
Prelab 08

2) For the allocation approach in lab_c.c the 2D array is allocated by 
mallocing space for the array with the number of rows and then allocating 
memory for each column with a for loop so basically N rows of memory length L.
In lab_a.c it is quicker because one giant memory block is allocated of N*L bytes
and pointer manipulation is used to break the block into pieces. This is better
especially for larger arrays. In lab_c.c the 2D array is deallocated with a for
loop that frees each row first and then frees the whole array. In lab_a.c the 
array is deallocated by calling free A[0] to free the elements and then free
is called again free(A) to free the array of pointers to rows. No for loops were
needed. 

4) valgrind outputs

lab_a.c

==4364== Memcheck, a memory error detector
==4364== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4364== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==4364== Command: ./lab_a
==4364== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==4364== 
==4364== HEAP SUMMARY:
==4364==     in use at exit: 0 bytes in 0 blocks
==4364==   total heap usage: 2 allocs, 2 frees, 144 bytes allocated
==4364== 
==4364== All heap blocks were freed -- no leaks are possible
==4364== 
==4364== For counts of detected and suppressed errors, rerun with: -v
==4364== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

lab_c.c

==4388== Memcheck, a memory error detector
==4388== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4388== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==4388== Command: ./lab_c
==4388== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==4388== 
==4388== HEAP SUMMARY:
==4388==     in use at exit: 0 bytes in 0 blocks
==4388==   total heap usage: 4 allocs, 4 frees, 144 bytes allocated
==4388== 
==4388== All heap blocks were freed -- no leaks are possible
==4388== 
==4388== For counts of detected and suppressed errors, rerun with: -v
==4388== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
